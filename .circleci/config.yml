version: 2.1
orbs:
  slack: circleci/slack@4.8.0

#parameters:
#  memstash-token:
#    type: string
#    default: This would be the value of the Memstash Token

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-prod-<<parameters.workflow_id>>
            aws s3 rb s3://udapeople-<<parameters.workflow_id>> --force
            aws cloudformation delete-stack --stack-name udapeople-frontend-prod-<<parameters.workflow_id>>

  # revert-migrations:
  #  description: Revert the last migration if successfully run in the current workflow.
    # parameters:
  #  steps:
      # Trigger rollback jobs if the smoke tests or any following jobs fail.
      # Revert the last migration (IF a new migration was applied) on the database to that it goes back to the way it was before. You can use that value you saved in MemStash.io to know if you should revert any migrations.
  #    - run:
  #        name: Revert migrations
  #        when: on_fail
  #        command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
  #          export SUCCESS=$(curl -H "token: << pipeline.parameters.memstash-token >>" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
  #          if(( $SUCCESS==1 )); 
  #          then
  #            cd ~/project/backend
  #            npm install
  #            npm run migrations:revert
  #          fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build 

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Front-end
          command: |
            cd frontend
            npm i
            npm run test
      - slack/notify:
          channel: devops
          event: fail
          template: basic_fail_1
                  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back-end
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan the Backend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-prod-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"  

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[all]" >> .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
            
            cat .circleci/ansible/inventory.txt
      - run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt   
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["65:e3:0d:22:cf:8b:c1:b9:6a:2d:71:76:61:c9:93:d9"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            ansible-playbook \
              -i .circleci/ansible/inventory.txt \
              .circleci/ansible/configure-server.yml
      # Here's the code during a rollback on       
      - run:
          name: Install AWS CLI for rollback
          when: on_fail
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm run migrations >> migration_output.txt
            cat migration_output.txt
      - run:
          name: Save the Output to a file and Use Grep to Check the Migration
          command: |
            cd backend
            if grep -q "has been executed successfully." migration_output.txt
            then
              touch ~/project/.circleci/outputs/db_migration_success
            fi
      - persist_to-workspace:
          root: ~/
          path: 
            - project/.circleci/outputs

#      - run:
#          name: Send migration results to memstash
#          command: |
            # Your code here
#            curl -H "Content-Type: text/plain" \
#              -H "token: << pipeline.parameters.memstash-token >>" \
#              --request PUT --data "1" \
#              https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}


     # Here's where you will add some code to rollback on failure
     #- revert_migration
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"        



# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows 
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          context: 
            - slack-secrets
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - test-frontend
      - scan-backend:
          requires:
            - test-backend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [circleci-project-setup]
      - configure-infrastructure:
          requires: [deploy-infrastructure]

          